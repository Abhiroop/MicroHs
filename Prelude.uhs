module Prelude where

(+)  = primitive "+"
(-)  = primitive "-"
(*)  = primitive "*"
quot = primitive "/"
rem  = primitive "%"
(<)  = primitive "<"
(<=) = primitive "<="
(>)  = primitive ">"
(>=) = primitive ">="
(==) = primitive "=="
(/=) = primitive "!="
--chr  = primitive "chr"
--ord  = primitive "ord"
error = primitive "?"

-- ("-'",    Prim "-'")
-- (":",     Comb "O")

data Bool = False | True

fst :: (a, b) -> a
fst p =
  case p of
    (a, _) -> a

snd :: (a, b) -> b
snd p =
  case p of
    (_, b) -> b

(.) :: (b -> c) -> (a -> b) -> (a -> c)
(.) f g x = f (g x)

id :: a -> a
id x = x

const :: a -> b -> a
const x _ = x
