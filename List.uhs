module List where
import Prelude

-- By parser some parser hacks we can use [] instead of Nil
data List a = Nil | (:) a (List a)

(++) :: [a] -> [a] -> [a]
(++) as ys =
  case as of
    [] -> ys
    x : xs -> x : xs ++ ys

map :: (a -> b) -> [a] -> [b]
map f =
  fix ( \ rec arg ->
    case arg of
      [] -> []
      a : as -> f a : rec as
    )

filter :: (a -> Bool) -> [a] -> [a]
filter p =
  fix ( \ rec arg ->
    case arg of
      [] -> []
      x : xs ->
        case p x of
          False -> rec xs
          True  -> x : rec xs
    )

foldr :: (a -> b -> b) -> b -> [a] -> b
foldr f z =
  fix ( \ rec arg ->
    case arg of
      [] -> z
      x : xs -> f x (rec xs)
    )

sum = foldr (+) 0
product = foldr (*) 1
and = foldr (&&) True
or = foldr (||) False
any p = or . map p
all p = and . map p
